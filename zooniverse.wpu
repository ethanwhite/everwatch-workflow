#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.exceptions-ignored = {loc('../../../miniconda3/envs/crowns/lib/python3.7/site-packages/_pytest/config/__init__.py'): {1130: True}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': '87Nn1JnlUHF8ZltxEUYUrBxn1d'\
        'XyY8RM',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.14427600627286985,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.4144869215291751,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'list',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'basename',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [loc('tests/test_tile_raster.py')],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'source-lineno',
                       'tree-state': {'expanded-nodes': [(0,),
        (0,
         0)],
                                      'selected-nodes': [(0,
        0,
        0)],
                                      'top-node': (0,)}}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 1495L,
                       'folded-linenos': [],
                       'history': {u'file:/Applications/WingIDE.app/Contents/Resources/src/testing/runners/run_pytest_xml.py': ['d'\
        'askdf.groupby(["Site","geo_index","Year"])..count().compute().reset'\
        '_index()\n',
        'daskdf.groupby(["Site","geo_index","Year"]).count().compute().reset'\
        '_index()\n',
        'daskdf.groupby(["Site","geo_index","Year"]).count().compute().reset'\
        '_index().grouby(["Site","geo_index"]).Year.count()\n',
        'daskdf.groupby(["Site","geo_index","Year"]).count().compute().reset'\
        '_index().groupby(["Site","geo_index"]).Year.count()\n',
        'daskdf.groupby(["Site","geo_index","Year"]).count().compute().reset'\
        '_index().groupby(["Site","geo_index"]).Year.count().groupby(["Site"'\
        ']).geo_index.count()\n',
        'daskdf.groupby(["Site","geo_index","Year"]).count().compute().reset'\
        '_index().groupby(["Site","geo_index"]).Year.count().reset_index().g'\
        'roupby(["Site"]).geo_index.count()\n',
        'nyears = daskdf.groupby(["Site","Year"]).Year.count().compute().res'\
        'et_index()\n',
        'nyears = daskdf.groupby(["Site","Year"]).Year.count().compute()\n',
        'nyears.reset_index()\n',
        'ntiles = daskdf.groupby(["Site","geo_index","Year"]).count().comput'\
        'e().reset_index()\n',
        'ntiles = daskdf.groupby(["Site","geo_index","Year"]).value_count()'\
        '\n',
        'ntiles = daskdf.groupby(["Site","geo_index","Year"]).value_counts()'\
        '\n',
        'ntiles = daskdf.value_counts(["Site","geo_index","Year"])\n',
        'ntiles = daskdf["Site","geo_index","Year"].value_counts()\n',
        'ntiles = daskdf[["Site","geo_index","Year"]].value_counts()\n',
        'ntiles = daskdf.groupby(["Site","geo_index","Year"]).Site.counts()'\
        '\n',
        'ntiles = daskdf.groupby(["Site","geo_index","Year"]).Site.count()\n',
        'ntiles\n',
        'ntiles.compute()\n',
        'nyears\n',
        ' total_trees = daskdf.shape[0].compute()\n',
        'total_trees\n',
        'total_sites = daskdf.Site.nunique().compute()\n',
        'total_sites\n',
        'print("There are {} tree predictions from {} sites".format(total_tr'\
        'ees, total_sites))\n',
        'average_height_area.reset_index()\n',
        "sumstats = {\"height\":[\"mean\",\"count\",\"std\"], \"area\":[\"me"\
        "an\",\"count\",\"std\"]}    \naverage_height_area = daskdf.groupby("\
        "['Site']).agg(sumstats).compute().reset_index()\n\n#Number of trees"\
        "\naverage_density = daskdf.groupby([\"Site\",\"geo_index\",\"Year\""\
        "]).count().groupby(\"Site\").left.mean().compute().reset_index()\n"\
        "average_density = average_density.rename(columns = {\"left\":\"n\""\
        "})\n\n",
        'average_density.columns\n',
        'average_height_area.columns()\n',
        'average_height_area.columns\n',
        "average_height_area.columns = average_height_area.columns.map('_'.j"\
        "oin).reset_index()\n",
        "sumstats = {\"height\":[\"mean\",\"count\",\"std\"], \"area\":[\"me"\
        "an\",\"count\",\"std\"]}    \naverage_height_area = daskdf.groupby("\
        "['Site']).agg(sumstats).compute().reset_index()\naverage_height_are"\
        "a.columns = average_height_area.columns.map('_'.join)\naverage_heig"\
        "ht_area = average_height_area.reset_index()\n\n",
        'results = average_height_area.merge(average_density)\n',
        'average_density\n',
        'average_height_area\n',
        'average_height_area.columns \n',
        'average_height_area.columns[0]\n',
        'average_height_area.columns[1]\n',
        'average_height_area.columns[1] = "Site"\n',
        'average_height_area.rename(columns={"Site_":"Site"})\n',
        "sumstats = {\"height\":[\"mean\",\"count\",\"std\"], \"area\":[\"me"\
        "an\",\"count\",\"std\"]}    \naverage_height_area = daskdf.groupby("\
        "['Site']).agg(sumstats).compute().reset_index()\naverage_height_are"\
        "a.columns = average_height_area.columns.map('_'.join)\naverage_heig"\
        "ht_area = average_height_area.rename(columns={\"Site_\":\"Site\"})"\
        "\n\naverage_height_area = average_height_area.reset_index()\n\n#Num"\
        "ber of trees\naverage_density = daskdf.groupby([\"Site\",\"geo_inde"\
        "x\",\"Year\"]).count().groupby(\"Site\").left.mean().compute().rese"\
        "t_index()\naverage_density = average_density.rename(columns = {\"le"\
        "ft\":\"n\"})\n    \n#Combine \nresults = average_height_area.merge("\
        "average_density)\n\n",
        'sumstats = {"height":["mean","count","std"], "area":["mean",upper,"'\
        'count","std"]}\n',
        'upper\n',
        "average_height_area = daskdf.groupby(['Site']).agg(sumstats).comput"\
        "e().reset_index()\n",
        "daskdf.groupby(['Site']).height.quantile(0.05)\n",
        "daskdf.groupby(['Site']).quantile(0.05)\n",
        "daskdf.groupby(['Site']).height.quantile()\n",
        "daskdf.groupby(['Site']).quantile(q=0.05,axis=1)\n",
        "daskdf.groupby(['Site']).quantile(q=0.05,axis=1).\n",
        'results\n',
        'daskdf.groupby(["Site","geo_index","Year"]).size()\n',
        'daskdf.groupby(["Site","geo_index","Year"]).size().compute()\n',
        'a = treedf.groupby(["Site","geo_index"]).size().reset_index().compu'\
        'te()\n',
        'a\n',
        'a.columns\n',
        'treedf.groupby(["Site","geo_index"]).size().to_frame("size")\n',
        'treedf.groupby(["Site","geo_index"]).size().to_frame("size").comput'\
        'e()\n',
        'fall_var = treedf.groupby(["Site","geo_index"]).size().to_frame("si'\
        'ze").reset_index().compute().groupby("Site").quantile([0.05,0.95]).'\
        'reset_index()\n',
        'fall_var = treedf.groupby(["Site","geo_index"]).size().to_frame("si'\
        'ze").reset_index().compute().groupby("Site").size.quantile([0.05,0.'\
        '95]).reset_index()\n',
        'fall_var = treedf.groupby(["Site","geo_index"]).size().to_frame("n"'\
        ').reset_index().compute().groupby("Site").n.quantile([0.05,0.95]).r'\
        'eset_index()\n',
        'fall_var.unstack()\n',
        'fall_var.level_1.unstack()\n',
        'fall_var.reset_index()\n',
        'fall_var.pivot("level_1")\n',
        'fall_var.pivot("level_1","n")\n',
        'fall_var.pivot("level_1","n").reset_index()\n',
        'fall_var.rename(columns={"level_1":"quantile"})\n',
        'fall_var = fall_var.rename(columns={"level_1":"quantile"})\n',
        'result = fall_mean.merge(fall_var)\n',
        'result\n',
        'fall_var.set_index("Site")\n',
        'fall_var.set_index("Site").quantile.unstack()\n',
        'fall_var.set_index("Site")["quantile"].unstack()\n',
        'fall_var.set_index("Site")["quantile"].unstack("n")\n',
        'fall_var.set_index("Site").unstack("n")\n',
        'fall_var.set_index("Site").unstack("quantile")\n',
        'fall_var.set_index(["Site","quantile"]).unstack("n")\n',
        'fall_var.set_index(["Site","quantile"]).unstack()\n',
        'fall_var.set_index(["Site","quantile"]).unstack().reset_index()\n',
        'fall_var.set_index(["Site","quantile"]).unstack().rename_axis(None,'\
        '1).reset_index()\n',
        'fall_var.set_index(["Site","quantile"]).unstack().rename_axis(None,'\
        '0).reset_index()\n',
        'fall_var.set_index(["Site","quantile"]).unstack().rename_axis(None)'\
        '.reset_index().to_frame()\n',
        'fall_var.set_index(["Site","quantile"]).unstack().rename_axis(None)'\
        '.reset_index().merge(fall_mean)\n',
        'fall_var.set_index(["Site","quantile"]).unstack().rename_axis(None)'\
        '.reset_index()\n',
        'fall_var.set_index(["Site","quantile"]).unstack().rename_axis(None)'\
        '.reset_index().    \n',
        'fall_var.cast("quantile")\n',
        'pd.cat\n',
        'pd.cast\n',
        'fall_var.pivot_table(index="Site",columns="quantile",values="n",fil'\
        'l_value=None).reset_index()\n',
        'fall_var = fall_var.pivot_table(index="Site",columns="quantile",val'\
        'ues="n",fill_value=None).reset_index()\n',
        'fall_mean= treedf.groupby(["Site","geo_index"]).size().reset_index('\
        ').compute().groupby("Site").mean().reset_index()\nfall_var = treedf'\
        '.groupby(["Site","geo_index"]).size().to_frame("n").reset_index().c'\
        'ompute().groupby("Site").n.quantile([0.05,0.95]).reset_index()\nfal'\
        'l_var = fall_var.rename(columns={"level_1":"quantile"})\nfall_var ='\
        ' fall_var.pivot_table(index="Site",columns="quantile",values="n",fi'\
        'll_value=None).reset_index()\nfall_var.rename(columns={"0.05":"lowe'\
        'r"})\n\n',
        'fall_var\n',
        'fall_var.rename(columns={"0.05":"lower"})\n',
        'fall_var.rename(columns={0.05:"lower"})\n',
        'fall_mean= treedf.groupby(["Site","geo_index"]).size().reset_index('\
        ').compute().groupby("Site").mean().reset_index()\n',
        'fall_mean = fall_mean.rename(columns={0:"mean"})\n',
        'fall_mean\n',
        'window.indices\n',
        'window.indices()\n',
        'window\n']},
                       'launch-id': None,
                       'sel-line': 1516L,
                       'sel-line-start': 81187L,
                       'selection_end': 81187L,
                       'selection_start': 81187L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 4L,
                       'folded-linenos': [],
                       'history': {None: ['import pandas as pd\n',
        'pd.Series({"path":["jon"]})\n',
        'pd.Series({"path":"jon"})\n']},
                       'launch-id': None,
                       'sel-line': 18L,
                       'sel-line-start': 595L,
                       'selection_end': 595L,
                       'selection_start': 595L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('manifest.py'),
        {'attrib-starts': [('main',
                            62)],
         'first-line': 75L,
         'folded-linenos': [],
         'sel-line': 77L,
         'sel-line-start': 2166L,
         'selection_end': 2219L,
         'selection_start': 2219L,
         'zoom': 0L},
        1584558525.334799],
        [loc('manifest.py'),
         {'attrib-starts': [('main',
                             62)],
          'first-line': 58L,
          'folded-linenos': [],
          'sel-line': 63L,
          'sel-line-start': 1832L,
          'selection_end': 1843L,
          'selection_start': 1839L,
          'zoom': 0L},
         1584558526.331684],
        [loc('manifest.py'),
         {'attrib-starts': [('main',
                             62)],
          'first-line': 52L,
          'folded-linenos': [],
          'sel-line': 66L,
          'sel-line-start': 1881L,
          'selection_end': 1885L,
          'selection_start': 1885L,
          'zoom': 0L},
         1584562148.308024],
        [loc('unknown:<untitled> #1'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 23L,
          'selection_start': 23L,
          'zoom': 0L},
         1584562170.041342],
        [loc('submit_job.sbatch'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 652L,
          'selection_start': 0L,
          'zoom': 0L},
         1584562173.219805],
        [loc('tests/submit_test.sbatch'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 14L,
          'sel-line-start': 542L,
          'selection_end': 542L,
          'selection_start': 542L,
          'zoom': 0L},
         1584562222.609025],
        [loc('tests/submit_test.sbatch'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 554L,
          'selection_end': 582L,
          'selection_start': 582L,
          'zoom': 0L},
         1584562227.515289],
        [loc('unknown:<untitled> #2'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 0L,
          'selection_start': 0L,
          'zoom': 0L},
         1584562229.384822],
        [loc('manifest.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 68L,
          'selection_end': 135L,
          'selection_start': 68L,
          'zoom': 0L},
         1584562233.484242],
        [loc('unknown:<untitled> #3'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 2L,
          'sel-line-start': 68L,
          'selection_end': 68L,
          'selection_start': 68L,
          'zoom': 0L},
         1584562242.929907],
        [loc('manifest.py'),
         {'attrib-starts': [('connect',
                             31)],
          'first-line': 27L,
          'folded-linenos': [],
          'sel-line': 31L,
          'sel-line-start': 833L,
          'selection_end': 1016L,
          'selection_start': 833L,
          'zoom': 0L},
         1584562247.958467],
        [loc('unknown:<untitled> #4'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 253L,
          'selection_end': 266L,
          'selection_start': 266L,
          'zoom': 0L},
         1584562472.291292],
        [loc('manifest.py'),
         {'attrib-starts': [('main',
                             62)],
          'first-line': 67L,
          'folded-linenos': [],
          'sel-line': 78L,
          'sel-line-start': 2228L,
          'selection_end': 2285L,
          'selection_start': 2275L,
          'zoom': 0L},
         1584562535.452477],
        [loc('tile_raster.py'),
         {'attrib-starts': [('run',
                             57)],
          'first-line': 56L,
          'folded-linenos': [],
          'sel-line': 71L,
          'sel-line-start': 2537L,
          'selection_end': 2556L,
          'selection_start': 2556L,
          'zoom': 0L},
         1584562558.466675],
        [loc('manifest.py'),
         {'attrib-starts': [('main',
                             64)],
          'first-line': 67L,
          'folded-linenos': [],
          'sel-line': 87L,
          'sel-line-start': 2475L,
          'selection_end': 2525L,
          'selection_start': 2517L,
          'zoom': 0L},
         1584565194.796639],
        [loc('manifest.py'),
         {'attrib-starts': [('main',
                             64)],
          'first-line': 67L,
          'folded-linenos': [],
          'sel-line': 77L,
          'sel-line-start': 2175L,
          'selection_end': 2179L,
          'selection_start': 2179L,
          'zoom': 0L},
         1584567665.731033],
        [loc('unknown:<untitled> #5'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 0L,
          'selection_start': 0L,
          'zoom': 0L},
         1584567813.117664],
        [loc('../../DeepForest_Model/generate.py'),
         {'attrib-starts': [],
          'first-line': 285L,
          'folded-linenos': [],
          'sel-line': 291L,
          'sel-line-start': 12054L,
          'selection_end': 12122L,
          'selection_start': 12122L,
          'zoom': 0L},
         1584568797.456178],
        [loc('manifest.py'),
         {'attrib-starts': [('upload',
                             46)],
          'first-line': 58L,
          'folded-linenos': [],
          'sel-line': 62L,
          'sel-line-start': 1749L,
          'selection_end': 1782L,
          'selection_start': 1782L,
          'zoom': 0L},
         1584572789.640306],
        [loc('submit_job.sbatch'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 13L,
          'sel-line-start': 518L,
          'selection_end': 518L,
          'selection_start': 518L,
          'zoom': 0L},
         1584591224.417366]],
        20),
        'current-loc': loc('manifest.py'),
        'editor-state-list': [(loc('../../../../../Applications/WingIDE.app/Contents/Resources/resources/doc/en/TOC.idx'),
                               {'displayed-index': 27,
                                'viewer-state': {'history': [-1,
        27],
        'history-pos': 1,
        'index': 27,
        'top': 0,
        'top-left-pos': None}}),
                              (loc('tests/test_tile_raster.py'),
                               {'attrib-starts': [('test_run',
        4)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 7L,
                                'sel-line-start': 199L,
                                'selection_end': 199L,
                                'selection_start': 199L,
                                'zoom': 0L}),
                              (loc('submit_job.sbatch'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 13L,
                                'sel-line-start': 518L,
                                'selection_end': 518L,
                                'selection_start': 518L,
                                'zoom': 0L}),
                              (loc('../../NEON_crown_maps/SLURM/figures.sbatch'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 3L,
                                'sel-line-start': 104L,
                                'selection_end': 144L,
                                'selection_start': 144L,
                                'zoom': 0L}),
                              (loc('tile_raster.py'),
                               {'attrib-starts': [('run',
        57)],
                                'first-line': 56L,
                                'folded-linenos': [],
                                'sel-line': 71L,
                                'sel-line-start': 2537L,
                                'selection_end': 2556L,
                                'selection_start': 2556L,
                                'zoom': 0L}),
                              (loc('../../NEON_crown_maps/tests/test_tfrecords.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 17L,
                                'selection_start': 17L,
                                'zoom': 0L}),
                              (loc('manifest.py'),
                               {'attrib-starts': [],
                                'first-line': 105L,
                                'folded-linenos': [],
                                'sel-line': 119L,
                                'sel-line-start': 3643L,
                                'selection_end': 3678L,
                                'selection_start': 3678L,
                                'zoom': 0L}),
                              (loc('environment.yml'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 5L,
                                'sel-line-start': 70L,
                                'selection_end': 82L,
                                'selection_start': 82L,
                                'zoom': 0L}),
                              (loc('tests/submit_test.sbatch'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 16L,
                                'sel-line-start': 554L,
                                'selection_end': 582L,
                                'selection_start': 582L,
                                'zoom': 0L}),
                              (loc('../../DeepForest_Model/generate.py'),
                               {'attrib-starts': [],
                                'first-line': 285L,
                                'folded-linenos': [],
                                'sel-line': 291L,
                                'sel-line-start': 12054L,
                                'selection_end': 12122L,
                                'selection_start': 12122L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('../../../../../Applications/WingIDE.app/Contents/Resources/resources/doc/en/TOC.idx'),
         loc('tests/test_tile_raster.py'),
         loc('submit_job.sbatch'),
         loc('../../NEON_crown_maps/SLURM/figures.sbatch'),
         loc('tile_raster.py'),
         loc('../../NEON_crown_maps/tests/test_tfrecords.py'),
         loc('manifest.py'),
         loc('environment.yml'),
         loc('tests/submit_test.sbatch'),
         loc('../../DeepForest_Model/generate.py')]),
                               'open_files': [u'../../../../../Applications/WingIDE.app/Contents/Resources/resources/doc/en/TOC.idx',
        u'../../DeepForest_Model/generate.py',
        u'environment.yml',
        u'submit_job.sbatch',
        u'tests/submit_test.sbatch',
        u'tests/test_tile_raster.py',
        u'tile_raster.py',
        u'../../NEON_crown_maps/SLURM/figures.sbatch',
        u'../../NEON_crown_maps/tests/test_tfrecords.py',
        u'manifest.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5865030674846625},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (1440,
                         0,
                         1920,
                         1080)}]}
guimgr.recent-documents = [loc('manifest.py'),
                           loc('../../NEON_crown_maps/tests/test_tfrecords.py'),
                           loc('submit_job.sbatch'),
                           loc('../../DeepForest_Model/generate.py')]
guimgr.visual-state = {loc('upload.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 31L,
        'selection_end': 157L,
        'selection_start': 31L,
        'zoom': 0L},
                       loc('../../../miniconda3/envs/Zooniverse/lib/python3.6/site-packages/_pytest/python.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/crowns/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'args',
                         u'save_dir',
                         u'png',
                         u'mkdir',
                         u'connec',
                         u'connected',
                         u'tile_raster']
testing.stored-results = (1,
                          [(u'/Users/ben/Documents/EvergladesWadingBird/Zooniverse/tests/test_tile_raster.py',
                            [('test_run',
                              1,
                              None,
                              None,
                              ('',
                               "<ExceptionInfo AssertionError(\"assert False"\
                               "\\n +  where False = <function exists at 0x1"\
                               "085a2440>('output/SOAP_046_1.png')\\n +    w"\
                               "here...sts\\n +      where <module 'posixpat"\
                               "h' from '/Users/ben/miniconda3/envs/crowns/l"\
                               "ib/python3.7/posixpath.py'> = os.path\") tbl"\
                               "en=1>",
                               "AssertionError: assert False\n +  where Fals"\
                               "e = <function exists at 0x1085a2440>('output"\
                               "/SOAP_046_1.png')\n +    where <function exi"\
                               "sts at 0x1085a2440> = <module 'posixpath' fr"\
                               "om '/Users/ben/miniconda3/envs/crowns/lib/py"\
                               "thon3.7/posixpath.py'>.exists\n +      where"\
                               " <module 'posixpath' from '/Users/ben/minico"\
                               "nda3/envs/crowns/lib/python3.7/posixpath.py'"\
                               "> = os.path",
                               [(u'/Users/ben/Documents/EvergladesWadingBird/Zooniverse/tests/test_tile_raster.py',
                                 '/Users/ben/Documents/EvergladesWadingBird/'\
                                 'Zooniverse/tests/test_tile_raster.py',
                                 7,
                                 'test_run',
                                 None,
                                 '    assert os.path.exists("output/SOAP_046'\
                                 '_1.png")')],
                               0,
                               None,
                               None,
                               None,
                               None),
                              1584555830,
                              4)])],
                          {})
